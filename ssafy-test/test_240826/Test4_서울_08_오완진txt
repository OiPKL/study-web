class Node
	String data
	Node link

class LinkedList
	// 생성자 호출 시 head 생성 (data null)
	Node head = new Node(null);

Main 메서드
	// LinkedList 생성자 호출 (최초 1회) -> head 생성
	LinkedList linkedList = new LinkedList();

addNode 메서드 (int idx, String data)
	// data를 입력받는 Node를 생성한다
	// 추가할 인덱스를 찾기위해 head부터 link를 타고 타고 가면서 조회한다
	head -> curr
	for (int i = 0; i <= idx; i++)
		curr.link = curr ..?
	// 마지막 인덱스의 link를 생성한 new Node 를 연결
	// 뒤의 노드부터 link 재연결 -> 앞에서부터 연결하면 중간에 노드의 link 가 끊어지게됨

deleteNode 메서드 (int idx)
	// 삭제할 인덱스를 찾기위해 head부터 link를 타고 타고 가면서 조회한다
	head -> curr
	for (int i = 0; i <= idx; i++)
		curr.link = curr ..?
	// 이전 노드의 link를 삭제한 다음 노드에 연결

------------------------------------------

배열과 연결리스트의 차이점 (3가지)

1. 조회
- 배열은 조회에 있어서 연결리스트에 비해 뛰어난 성능을 지닌다.
- 인덱스를 알면 바로 접근이 가능하기 때문이다.
- 반면 연결리스트는 인덱스를 모르기 때문에
- head 부터 인덱스를 찾고 다음 노드를 이어가며 찾는 방식으로 접근할 수 있다.

2. 삽입/삭제
- 연결리스트는 삽입/삭제에 있어서 배열에 비해 뛰어난 성능을 지닌다.
- 배열은 중간에 삽입/삭제를 하려면 나머지 배열 전체를 이동시켜야 하기 때문이다.
- 반면 연결리스트는 이전 노드와 다음 노드만 알면 삽입/삭제가 용이하다.

3. 활용
- 이러한 연결리스트의 특징을 활용하여 큐와 같은 자료구조에 사용할 수 있다.
- 큐에서는 선입선출의 방식으로 맨 앞 자료의 조회/삽입/삭제가 필요한 상황에서
- 연결리스트를 활용하면 배열처럼 나머지 인덱스들의 이동없이도
- 맨 앞 자료를 활용할 수 있기 때문이다.