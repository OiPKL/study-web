import java.util.Arrays;

public class Sort {
	
	static int N;
	static int[] arr = {45, 2, 6, 13, 88, 99, 63, 14};
	static int[] tmp;
	
	public static void main(String[] args) {
		
		N = arr.length;
		tmp = new int[N];
		// left = 0, right = N - 1 을 파라미터로 하는 MergeSort 호출
		MergeSort(0, N - 1);
		
		System.out.println(Arrays.toString(arr));
		
	}
	
	// left : 구간의 왼쪽 끝
	// right : 구간의 오른쪽 끝
	static void MergeSort(int left, int right) {
		// left == right -> left는 오른쪽으로, right은 왼쪽으로 가다보면 만나게 되는데 이때는 원소의 개수가 하나만 남았음을 의미
		if (left == right) return;
		// mid : 분할된 왼쪽 구간의 오른쪽 끝
		// mid + 1 : 분할된 오른쪽 구간의 왼쪽 끝
		int mid = (left + right) / 2;
		// 왼쪽 구간 분할
		MergeSort(left, mid);
		// 오른쪽 구간 분할
		MergeSort(mid + 1, right);
		// 정렬하면서 병합
		Merge(left, mid, right);
	}
	
	static void Merge(int left, int mid, int right) {
		// 왼쪽 구간의 원소의 인덱스를 나타내는 포인터
		int L = left;
		// 오른쪽 구간의 원소의 인덱스를 나타내는 포인터
		int R = mid + 1;
		// tmp 배열의 인덱스 -> 임시저장용 ~ 원본 배열에 복사될 배열임
		int idx = left;
		
		// 왼쪽구간의 포인터가 가리키는 원소와 오른쪽 구간의 포인터가 가리키는 원소와 크기 비교
		// -> 작은 값을 tmp 배열에 추가함
		// -> 왼쪽 구간이 왼쪽구간의 끝(mid)에 도달하거나 오른쪽 구간이 오른쪽구간의 끝(right)에 도달할 때까지
		while (L <= mid && R <= right) {
			if (arr[L] <= arr[R])
				tmp[idx++] = arr[L++];
			else
				tmp[idx++] = arr[R++];
		}
		// 두 구간 중에 한 쪽이 끝나면 다른 한 쪽에는 원소들이 남게 되있음
		// 만약 왼쪽 구간에 정렬이 덜된 원소가 남았다 -> tmp 배열에 모두 추가
		if (L <= mid) {
			for (int i = L; i <= mid; i++)
				tmp[idx++] = arr[i];
		// 만약 오른쪽 구간에 정렬이 덜된 원소가 남았다 -> tmp 배열에 모두 추가
		} else {
			for (int i = R; i <= right; i++)
				tmp[idx++] = arr[i];
		}
		// 정렬된 tmp 배열을 원본배열 arr에 복사
		for (int i = left; i <= right; i++)
			arr[i] = tmp[i];
	}
	
}

************************************************************************************************************************

분할 정렬은 분할정복을 이용한 정렬 기법이다
분할 : 큰 문제를 작은 문제로 나눈다 -> MergeSort 에서 작은 배열로 나누기
정복 : 분할 된 작은 문제들을 해결 -> 분할된 작은 배열들에서 각각 정렬
결합 : 해결된 문제들을 다시 병합

분할 정렬은 다음과 같은 특징을 가진다.

1. 안정된 정렬
분할 정렬에서 사용하는 left, right 에 의해서 분할된 부분의 왼쪽과 오른쪽 구간의 각각에서의 왼쪽부터 값을 비교해가며 정렬해가기 때문에
데이터의 순서가 뒤섞이지 않으면서 그대로 유지된채로 정렬된다. 이는 데이터 분포와 피벗의 상태에 따라 순서가 뒤바뀔 수도 있게되는 퀵 정렬과 비교했을 때 장점이 된다.

2. 시간 복잡도 O(N logN)
배열의 크기만큼의 N 과 재귀 트리 함수의 총 호출 수 logN 을 곱한 N logN 만큼의 시간복잡도를 가진다.
정렬 과정에서 항상 절반으로 나눈채로 비교하기 때문에 어떤 데이터 분포를 지니든 O(N logN)의 시간복잡도를 가진다.
퀵 정렬에서는 데이터 분포와 피벗의 선택에 따라 최악의 경우 O(N^2)을 가질 수 있지만 병합 정렬에서는 최악의 상황에서도 같은 시간복잡도를 가지는 장점이 있다.
하지만 이는 곧 비록 정렬된 데이터일지라도 시간복잡도에서 이득을 보지 못한다는 단점이기도 하다.

3. 공간 복잡도 O(N)
tmp 배열 (크기 N) 만큼의 메모리를 추가로 사용한다.
이는 자기자신의 위치에서 정렬되는 퀵 정렬과는 대비되는 특징으로 메모리 상에서 손해를 본다는 단점을 지닌다.