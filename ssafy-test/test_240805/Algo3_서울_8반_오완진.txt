import java.util.Arrays;

// Algo3_서울_8반_오완진
public class CountingSortPractice {
	public static void main(String[] args) {
		
		int[] originalArray = { 0, 54, 21, 79, 12, 16, 0, 54, 23, 11, 7 };
		
		// 먼저 정렬할 originalArray의 원소마다 카운팅하는 카운트 배열 count[]를 생성하기 위해
		//   originalArray에서 가장 큰 원소 K를 찾는다
		// 여기서 카운팅 정렬의 제한사항이 생긴다   ------------------------------------------- 제한사항
		// 만약 배열의 원소가 0 0 0 0 0 0 9998 9999 와 같이 중간의 원소가 없는 배열이라면
		//   카운트 배열에서 쓸모없는 인덱스(1~9997)가 생성되므로 매우 비효율적인 정렬 방법이 된다
		// 시간 복잡도는 N + K   -------------------------------------------------------- 시간복잡도
		// - 단순 for문만 N번 계산되고, 카운트 배열에서 K번 계산되는데 계수는 무시 => N + K
		int K = -1;
		for (int i = 0; i < originalArray.length; i++)
			K = Math.max(K, originalArray[i]);
		
		// 찾은 K를 이용해 카운트 배열의 크기를 설정한다
		// - 배열 번호의 시작은 0이므로 K+1개
		// 카운트 배열의 인덱스(= originalArray의 원소 값)에는 originalArray의 원소 개수만큼 카운팅 된다
		// - Ex. originalArray에 원소 0이 2개 -> count[0] = 2
		int[] count = new int[K+1];
		for (int i = 0; i < originalArray.length; i++)
			count[originalArray[i]]++;
		
		// 카운팅 정렬의 특징인 안정된 정렬을 만들기 위해 합 배열을 계산한다
		// - 이는 뒤에서부터 정렬된 orderedArray에 originalArray의 원소를 넣을때
		//     같은 원소가 있다면 몇개씩 넣어야하는지 계산하기 위함이다
		// 여기서 안정된 정렬이란 같은 원소 0(A)와 0(B)가 있다면 0들의 순서(A-B)를 유지한다는 의미이다
		// - 이는 카운팅 정렬이 다른 정렬들과 차별화되는 특징이다   ------------------------------- 다른정렬비교
		for (int i = 1; i < count.length; i++)
			count[i] += count[i-1];
		
		// orderedArray의 뒤에서부터 정렬되는데 앞서 구한 합 배열의 인덱스들의 개수만큼 복사된다
		// Ex. originalArray에서 가장 큰 원소인 79 -> orderedArray[끝인덱스부터]
		//     다음으로 큰 원소인 2개의 54 -> 합 배열에서 2개로 계산되었기에 2개 만큼 추가된다
		//     이런 식으로 앞 과정에서의 카운트 배열과 합 배열에서 원소들의 개수를 측정했기에
		//     orderedArray에는 뒤의 인덱스부터 해당 원소들의 개수만큼 채워지게 된다
		//     카운트 배열의 인덱스 = originalArray의 원소 값 임을 이용한다
		int[] orderedArray = new int[originalArray.length];
		for (int i = originalArray.length - 1; i >= 0; i--)
			orderedArray[count[originalArray[i]]-- - 1] = originalArray[i];
		
		System.out.println(Arrays.toString(orderedArray));
		// >> [0, 0, 7, 11, 12, 16, 21, 23, 54, 54, 79]
		
	}
}
